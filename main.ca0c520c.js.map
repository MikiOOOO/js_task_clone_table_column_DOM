{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","thead","tbody","tfoot","copyTableColumn","columnIndex","columnTitle","children","innerText","split","columnContent","map","child","columnFooter","addColumnToTable","columnToAdd","columnPosition","headerTh","createElement","after","forEach","contentValue","contentIndex","td","footerTh","innerHTML","copiedColumn"],"mappings":";AAAA,aAoDA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAlDA,IAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EAEd,SAASC,EAAgBC,GAQhB,MAAA,CACLC,YARkBR,EAAMS,SAASN,GAAOM,SAAS,GAAGC,UACnDC,MAAM,MAAMJ,GAQbK,cAPoB,EAAIZ,EAAMS,SAASL,GAAOK,UAC7CI,IAAI,SAAAC,GAASA,OAAAA,EAAMJ,UAAUC,MAAM,MAAMJ,KAO1CQ,aANmBf,EAAMS,SAASJ,GAAOI,SAAS,GACjDC,UAAUC,MAAM,MAAMJ,IAW3B,SAASS,EAAiBC,EAAaC,GAC/BC,IAAAA,EAAWlB,SAASmB,cAAc,MAExCD,EAAST,UAAYO,EAAYT,YAEjCR,EAAMS,SAASN,GAAOM,SAAS,GAC5BA,SAASS,GAAgBG,MAAMF,GAElCF,EAAYL,cAAcU,QACxB,SAACC,EAAcC,GACPC,IAAAA,EAAKxB,SAASmB,cAAc,MAElCK,EAAGf,UAAYa,EAEfvB,EAAMS,SAASL,GAAOK,SAASe,GAC5Bf,SAASS,GAAgBG,MAAMI,KAGhCC,IAAAA,EAAWzB,SAASmB,cAAc,MAExCM,EAASC,UAAYV,EAAYF,aAEjCf,EAAMS,SAASJ,GAAOI,SAAS,GAC5BA,SAASS,GAAgBG,MAAMK,GAGpC,IAAME,EAAetB,EAAgB,GAErCU,EAAiBY,EAAc","file":"main.ca0c520c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst thead = 0;\nconst tbody = 1;\nconst tfoot = 2;\n\nfunction copyTableColumn(columnIndex) {\n  const columnTitle = table.children[thead].children[0].innerText\n    .split('\\t')[columnIndex];\n  const columnContent = [...table.children[tbody].children]\n    .map(child => child.innerText.split('\\t')[columnIndex]);\n  const columnFooter = table.children[tfoot].children[0]\n    .innerText.split('\\t')[columnIndex];\n\n  return {\n    columnTitle,\n    columnContent,\n    columnFooter,\n  };\n}\n\n// column is added after specified Position starting from 0\n\nfunction addColumnToTable(columnToAdd, columnPosition) {\n  const headerTh = document.createElement('th');\n\n  headerTh.innerText = columnToAdd.columnTitle;\n\n  table.children[thead].children[0]\n    .children[columnPosition].after(headerTh);\n\n  columnToAdd.columnContent.forEach(\n    (contentValue, contentIndex) => {\n      const td = document.createElement('td');\n\n      td.innerText = contentValue;\n\n      table.children[tbody].children[contentIndex]\n        .children[columnPosition].after(td);\n    });\n\n  const footerTh = document.createElement('th');\n\n  footerTh.innerHTML = columnToAdd.columnFooter;\n\n  table.children[tfoot].children[0]\n    .children[columnPosition].after(footerTh);\n}\n\nconst copiedColumn = copyTableColumn(1);\n\naddColumnToTable(copiedColumn, 3);\n"]}